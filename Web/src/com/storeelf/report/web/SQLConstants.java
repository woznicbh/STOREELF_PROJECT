package com.storeelf.report.web;

import java.util.TreeMap;

public class SQLConstants {	

	public static String ID_UTIL_ORDER_LINE_SQL 							= "UT_Order_Line_OMS";
	public static String ID_UTIL_ORDER_LINE_SQL2							= "UT_Order_line_OMS2";
	public static String ID_UTIL_ORDER_HEADER_CHANGES_SQL					= "UT_Order_Header_Changes";
	public static String ID_UTIL_ORDER_HEADER_CHANGES_SQL2					= "UT_Order_Header_Changes2";
	public static String ID_UTIL_INV_OMS_SQL								= "UT_Inventory_OMS";
	public static String ID_UTIL_INV_OMS_SQL_QUICK							= "UT_Inventory_OMS_Quick";
	public static String ID_UTIL_INV_OMS_ALERT_SQL							= "UT_Inventory_OMS_Alert";
	public static String ID_UTIL_PRIME_LINE_NUMBER_SQL						= "UT_Prime_Line_Number";
	public static String ID_UTIL_PRIME_LINE_NUMBER_SQL2						= "UT_Prime_Line_Number2";
	public static String ID_UTIL_PROMOTION_CODE_SQL							= "UT_Promotion_Code";
	public static String ID_UTIL_ORDER_INVOICE_SQL							= "UT_Order_Invoice";
	public static String ID_UTIL_ORDER_INVOICE_POPUP_SQL					= "UT_Order_Invoice_Popup";
	public static String ID_UTIL_ITEM_DETAIL_SQL							= "UT_Item_Detail";
	public static String ID_UTIL_ITEM_DETAIL_SQL2							= "UT_Item_Detail2";
	public static String ID_UTIL_ORDER_STATUS_SQL							= "UT_Order_Status";
	public static String ID_UTIL_SHIPMENT_LINE_DETAILS_SQL					= "UT_Shipment_Detail";
	public static String ID_UTIL_SHIPMENT_LINE_DETAILS_SQL2					= "UT_Shipment_Detail2";
	public static String ID_UTIL_SHIPMENT_LINE_DETAILS_SQL3					= "UT_Shipment_Detail3";
	public static String ID_UTIL_SHIPMENT_LINE_DETAILS_SQL4					= "UT_Shipment_Detail4";
	public static String ID_UTIL_CUSTOMER_EMAIL_SQL							= "UT_Customer_Email";
	public static String ID_UTIL_PICKTICKET_SQL								= "UT_Pickticket";
	public static String ID_UTIL_INV_GIV_SQL								= "UT_Inventory_GIV";
	public static String ID_UTIL_INV_EFC_SQL								= "UT_Inventory_EFC";
	public static String ID_UTIL_INV_EFC_SQL2								= "UT_Inventory_EFC2";
	public static String ID_UTIL_SAFETY_FACTOR_SQL							= "UT_Safety_Factor";
	public static String ID_UTIL_SAFETY_FACTOR_SQL2							= "UT_Safety_Factor2";
	public static String ID_UTIL_CHUB_INVOICE_SQL							= "UT_Chub_Invoice";

	public static String SD_UNIT_CAPACITY_GIV_SQL							= "SD_Unit_Capacity_Sourcing_GIV";
	public static String SD_RULE_DETAIL_GIV_SQL								= "SD_Rule_Details_Sourcing_GIV";
	public static String SD_RULE_DETAIL_GIV_SQL2							= "SD_Rule_Detials_Sourcing_GIV2";
	public static String SD_REGION_DETAIL_GIV_SQL							= "SD_Region_Details_Sourcing_GIV";
	public static String SD_DIST_GROUP_GIV_SQL								= "SD_Distribution_Group_GIV";
	public static String SD_GROUP_DETAIL_GIV_SQL							= "SD_Group_Details_GIV";

	public static String WM_PROSHIP_CONT_LOOKUP_SQL							= "WM_Proship_Container_Lookup";
	public static String WM_BUILD_QUERY_SQL									= "WM_Build_Query";
	public static String WM_BUILD_QUERY_SQL2								= "WM_Build_Query2";

	public static String WT_TRANSFER_ORDERS_SQL								= "WM_Transfer_Orders";
	public static String WT_TRANSFER_ORDERS_SQL2							= "WM_Transfer_Orders2";
	public static String WT_TRANSFER_ORDER_POPUP_SQL						= "WT_Transfer_Order_Popup";

	public static String REPRINT_MANUAL_SCM_SQL 							= "Reprint_Manual_SCM";
	public static String REPRINT_MANUAL_STORE_INFO_SQL 						= "Reprint_Manual_Store_Info";
	public static String REPRINT_MANUAL_SHIPALONE_SQL 						= "Reprint_Manual_ShipAlone";
	public static String REPRINT_MANUAL_INIT_BOXES_SQL						= "Reprint_Manual_Init_Boxes";
	public static String REPRINT_MANUAL_INIT_STORES_SQL						= "Reprint_Manual_Init_Stores";
	public static String REPRINT_MANUAL_INIT_SVCLVL_SQL						= "Reprint_Manual_Init_Svclvl";

	public static String REPRINT_SHIPMENT_SCM_SQL							= "Reprint_Shipment_SCM";
	public static String REPRINT_SHIPMENT_SCM_SQL2							= "Reprint_Shipment_SCM2";
	public static String REPRINT_BOTH_CONTAINER_SQL							= "Reprint_Both_Container";
	public static String REPRINT_BOTH_PERSON_SQL							= "Reprint_Both_Person";
	public static String REPRINT_BOTH_PERSON_SQL2							= "Reprint_Both_Person2";

	public static String ADD_SQL_KEY_SQL									= "Add_SQL_Key";
	public static String ADD_SQL_INSERT_SQL									= "Add_SQL_Insert";
	public static String ADD_SQL_INIT_FUNC_SQL								= "Add_SQL_Init_Func";

	public static TreeMap<String, String> SQL_MAP = new TreeMap<String, String>();
	static {

		SQL_MAP.put(
				ID_UTIL_ORDER_LINE_SQL,
				"\n WITH t1 AS                                               "
						+ "\n   (SELECT a.order_line_key,                            "
						+ "\n     a.chained_from_order_line_key,                     "
						+ "\n     CASE                                               "
						+ "\n       WHEN a.line_type    = ' '                        "
						+ "\n       AND (g.shipnode_key > ' ' )                      "
						+ "\n       THEN g.shipnode_key                              "
						+ "\n       WHEN a.line_type > ' '                           "
						+ "\n       THEN a.line_type                                 "
						+ "\n       WHEN f.description LIKE '%Cancelled%'            "
						+ "\n       THEN 'Cancelled'                                 "
						+ "\n       WHEN f.description LIKE '%DSV%'                  "
						+ "\n       THEN 'DSV'                                       "
						+ "\n       ELSE ' '                                         "
						+ "\n     END AS shipnode_key,                               "
						+ "\n     b.order_no,                                        "
						+ "\n     b.order_date,                                      "
						+ "\n     a.prime_line_no,                                   "
						+ "\n     f.description status,                              "
						+ "\n     a.item_id,                                         "
						+ "\n     e.status_quantity,                   		     	 "
						+ "\n     a.gift_flag,                                       "
						+ "\n     CASE                                               "
						+ "\n       WHEN a.extn_wrap_together_group_code = ' '       "
						+ "\n       THEN 'N'                                         "
						+ "\n       ELSE 'Y'                                         "
						+ "\n     END AS GIFT_WRAP,                                  "
						+ "\n     c.extn_ship_alone,                                 "
						+ "\n     c.extn_cage_item,                                  "
						+ "\n     c.extn_is_plastic_gift_card,                       "
						+ "\n     c.extn_breakable,                                  "
						+ "\n     c.allow_gift_wrap,                                 "
						+ "\n     c.extn_baggage,                                    "
						+ "\n     c.is_hazmat,                                       "
						+ "\n     (trim(d.address_line1)                             "
						+ "\n     || trim(d.address_line2)                           "
						+ "\n     ||', '                                             "
						+ "\n     || trim(d.city)                                    "
						+ "\n     ||', '                                             "
						+ "\n     || trim(d.state)                                   "
						+ "\n     ||', '                                             "
						+ "\n     || trim(d.zip_code)) AS SHIP_TO,                   "
						+ "\n     CASE                                               "
						+ "\n       WHEN c.item_type = 'DS'                          "
						+ "\n       THEN 'Y'                                         "
						+ "\n       ELSE 'N'                                         "
						+ "\n     END AS DS_ITEM,                                    "
						+ "\n     b.CARRIER_SERVICE_CODE                             "
						+ "\n   FROM yfs_order_line a                       	     "
						+ "\n   JOIN yfs_order_header b                   	     	 "
						+ "\n   ON b.order_header_key = a.order_header_key           "
						+ "\n   LEFT JOIN yfs_item c                   		     	 "
						+ "\n   ON c.item_id = a.item_id                             "
						+ "\n   JOIN yfs_person_info d                  	    	 "
						+ "\n   ON d.person_info_key = a.ship_to_key                 "
						+ "\n   JOIN yfs_order_release_status e         	    	 "
						+ "\n   ON e.order_line_key   = a.order_line_key             "
						+ "\n   AND e.status_quantity > 0                            "
						+ "\n   JOIN yfs_status f                      		    	 "
						+ "\n   ON f.status = e.status                               "
						+ "\n   AND f.process_type_key = 'ORDER_FULFILLMENT'         "
						+ "\n   LEFT JOIN yfs_order_release g            	    	 "
						+ "\n   ON g.order_release_key = e.order_release_key         "
						+ "\n   WHERE b.order_no       = ?							 "
						+ "\n   ORDER BY a.prime_line_no                             "
						+ "\n   ),                                                   "
						+ "\n   t2 AS                                                "
						+ "\n   ( SELECT DISTINCT a.order_line_key,                  "
						+ "\n     a.chained_from_order_line_key,                     "
						+ "\n     CASE                                               "
						+ "\n       WHEN a.line_type    = ' '                        "
						+ "\n       AND (g.shipnode_key > ' ' )                      "
						+ "\n       THEN g.shipnode_key                              "
						+ "\n       WHEN a.line_type > ' '                           "
						+ "\n       THEN a.line_type                                 "
						+ "\n       WHEN f.description LIKE '%Cancelled%'            "
						+ "\n       THEN 'Cancelled'                                 "
						+ "\n       WHEN f.description LIKE '%DSV%'                  "
						+ "\n       THEN 'DSV'                                       "
						+ "\n       ELSE ' '                                         "
						+ "\n     END AS shipnode_key,                               "
						+ "\n     b.order_no,                                        "
						+ "\n     b.order_date,                                      "
						+ "\n     a.prime_line_no,                                   "
						+ "\n     f.description status,                              "
						+ "\n     a.item_id,                                         "
						+ "\n     e.status_quantity,                   		     	 "
						+ "\n     a.gift_flag,                                       "
						+ "\n     CASE                                               "
						+ "\n       WHEN a.extn_wrap_together_group_code = ' '       "
						+ "\n       THEN 'N'                                         "
						+ "\n       ELSE 'Y'                                         "
						+ "\n     END AS GIFT_WRAP,                                  "
						+ "\n     c.extn_ship_alone,                                 "
						+ "\n     c.extn_cage_item,                                  "
						+ "\n     c.extn_is_plastic_gift_card,                       "
						+ "\n     c.extn_breakable,                                  "
						+ "\n     c.allow_gift_wrap,                                 "
						+ "\n     c.extn_baggage,                                    "
						+ "\n     c.is_hazmat,                                       "
						+ "\n     (trim(d.address_line1)                             "
						+ "\n     || trim(d.address_line2)                           "
						+ "\n     ||', '                                             "
						+ "\n     || trim(d.city)                                    "
						+ "\n     ||', '                                             "
						+ "\n     || trim(d.state)                                   "
						+ "\n     ||', '                                             "
						+ "\n     || trim(d.zip_code)) AS SHIP_TO,                   "
						+ "\n     CASE                                               "
						+ "\n       WHEN c.item_type = 'DS'                          "
						+ "\n       THEN 'Y'                                         "
						+ "\n       ELSE 'N'                                         "
						+ "\n     END AS DS_ITEM,                                    "
						+ "\n     b.CARRIER_SERVICE_CODE                             "
						+ "\n   FROM yfs_order_line a                       	     "
						+ "\n   JOIN yfs_order_header b                     	     "
						+ "\n   ON b.order_header_key = a.order_header_key           "
						+ "\n   LEFT JOIN yfs_item c                        	     "
						+ "\n   ON c.item_id = a.item_id                             "
						+ "\n   JOIN yfs_person_info d                      	     "
						+ "\n   ON d.person_info_key = a.ship_to_key                 "
						+ "\n   JOIN yfs_order_release_status e             	     "
						+ "\n   ON e.order_line_key   = a.order_line_key             "
						+ "\n   AND e.status_quantity > 0                            "
						+ "\n   JOIN yfs_status f                           	     "
						+ "\n   ON f.status            = e.status                    "
						+ "\n   AND f.process_type_key = 'PO_FULFILLMENT'            "
						+ "\n   JOIN yfs_order_release g                    	     "
						+ "\n   ON g.order_release_key = e.order_release_key         "
						+ "\n   WHERE b.order_no LIKE ?								 "
						+ "\n   ORDER BY a.prime_line_no                             "
						+ "\n ),"
						+ "\n t3 AS"
						+ "\n (SELECT t2.*,"
						+ "\n case when t1.order_no is null then ' ' else t1.order_no end as CHAINED_ORDER_NO,"
						+ "\n case when to_char(t1.prime_line_no) is null then ' ' else to_char(t1.prime_line_no) end as CHAINED_PRIME_LINE_NO"
						+ "\n FROM t1"
						+ "\n JOIN t2"
						+ "\n ON t2.chained_from_order_line_key = t1.order_line_key"
						+ "\n ),"
						+ "\n t4 AS"
						+ "\n (SELECT t1.*,"
						+ "\n case when t3.order_no is null then ' ' else t3.order_no end as CHAINED_ORDER_NO,"
						+ "\n case when to_char(t3.prime_line_no) is null then ' ' else to_char(t3.prime_line_no) end as CHAINED_PRIME_LINE_NO"
						+ "\n FROM t1"
						+ "\n LEFT JOIN t3"
						+ "\n ON t3.chained_from_order_line_key = t1.order_line_key"
						+ "\n )"
						+ "\n SELECT * FROM t3"
						+ "\n UNION"
						+ "\n SELECT * FROM t4");

		SQL_MAP.put(
				ID_UTIL_ORDER_LINE_SQL2,
				"\n	SELECT a.order_line_key,                            			"
						+"\n		a.chained_from_order_line_key,                          "
						+"\n		b.seller_organization_code AS shipnode_key,             "
						+"\n		b.order_no,                                             "
						+"\n		b.order_date,                                           "
						+"\n		a.prime_line_no,                                        "
						+"\n		CASE e.status                                           "
						+"\n			WHEN '1000' THEN 'Draft order created'          	"
						+"\n			WHEN '1000.9000' THEN 'Suspend order'           	"
						+"\n			WHEN '1100' THEN 'Tender created'               	"
						+"\n			WHEN '1100.0001' THEN 'Store Order Created'     	"
						+"\n			WHEN '1100.0005' THEN 'Store Order Created'     	"
						+"\n			WHEN '9000' THEN 'Cancelled'                    	"
						+"\n		ELSE 'unknown'                                          "
						+"\n		END AS status,                              			"
						+"\n		a.item_id,                                              "
						+"\n		e.status_quantity,                                      "
						+"\n		a.gift_flag,                                            "
						+"\n		CASE                                                    "
						+"\n			WHEN a.extn_wrap_together_group_code = ' '      	"
						+"\n			THEN 'N'                                        	"
						+"\n			ELSE 'Y'                                        	"
						+"\n		END AS GIFT_WRAP,                                       "
						+"\n		'n/a' as extn_ship_alone,                               "
						+"\n		'n/a' as extn_cage_item,                                "
						+"\n		'n/a' as extn_is_plastic_gift_card,                     "
						+"\n		'n/a' as extn_breakable,                                "
						+"\n		'n/a' as allow_gift_wrap,                               "
						+"\n		'n/a' as extn_baggage,                                  "
						+"\n		'n/a' as is_hazmat,                                     "
						+"\n		'n/a' AS SHIP_TO,                                       "
						+"\n		'n/a' AS DS_ITEM,                                       "
						+"\n		b.CARRIER_SERVICE_CODE                                  "
						+"\n	FROM OMSOMNI01.yfs_order_line a                             "
						+"\n	JOIN OMSOMNI01.yfs_order_header b                           "
						+"\n		ON b.order_header_key = a.order_header_key              "
						+"\n	                                                           	"
						+"\n	JOIN OMSOMNI01.yfs_order_release_status e                   "
						+"\n		ON e.order_line_key   = a.order_line_key                "
						+"\n		AND e.status_quantity > 0                               "
						+"\n	                                                            "
						+"\n	LEFT JOIN OMSOMNI01.yfs_order_release g                     "
						+"\n		ON g.order_release_key = e.order_release_key            "
						+"\n	WHERE b.order_no       = '16010210140842328'                "
						+"\n		ORDER BY a.prime_line_no                                ");
		
		SQL_MAP.put(
				ID_UTIL_ORDER_INVOICE_SQL,
				"\n select order_number, order_date, 											"
						+ "\n POS_DATE,invoice_number, total_tax_on_invoice, 							"
						+ "\n total_discounts, store_number, SUBSTR(RECEIPT_ID, 20, 2) AS REGISTER, 	"
						+ "\n SUBSTR(RECEIPT_ID, 22, 4) AS TRANSACTION,									"
						+ "\n merchandise_total, invoice_number 										"
						+ "\n from KL_HARD_TOTALS 														"
						+ "\n where order_number = (?)													");

		SQL_MAP.put(
				ID_UTIL_ORDER_INVOICE_POPUP_SQL,
				"\n select oh.order_no as order_no, 					"
						+ "\n       yp.credit_card_type as tender_Type, 		"
						+ "\n       oit.item_id as sku, 						"
						+ "\n       oit.quantity  as quantity, 					"
						+ "\n      oit.unit_price as Unitprice, 				"
						+ "\n        oit.other_charges as discount, 			"
						+ "\n      oit.tax as taxamount, 						"
						+ "\n        tax.tax_percentage 						"
						+ "\n from 												"
						+ "\n yfs_order_header oh, 								"
						+ "\n yfs_payment yp, 									"
						+ "\n yfs_order_invoice oi, 							"
						+ "\n STERLING.yfs_order_invoice_detail oit, 			"
						+ "\n yfs_tax_breakup tax 								"
						+ "\n where oh.order_no in 								"
						+ "\n (?)				 								"
						+ "\n and oi.invoice_no = (?)							"
						+ "\n and oh.order_header_key=yp.order_header_key 		"
						+ "\n and yp.order_header_key=oi.order_header_key 		"
						+ "\n and oi.order_invoice_key = oit.order_invoice_key  "
						+ "\n and oi.order_header_key=tax.header_key 			"
						+ "\n and oit.order_line_key=tax.line_key 				"
						+ "\n order by oh.order_no 								");

		SQL_MAP.put(
				ID_UTIL_ITEM_DETAIL_SQL,
				"\n  yfs_item.SHORT_DESCRIPTION,										"
						+"\n  yfs_item.primary_supplier,										"
						+"\n  yfs_item.extn_direct_ship_item,									"
						+"\n  yfs_item.extn_ship_alone,											"
						+"\n  yfs_item.extn_cage_item,											"
						+"\n  yfs_item.extn_is_plastic_gift_card,								"
						+"\n  Yfs_Item.Extn_Breakable,											"
						+"\n  Yfs_Item.Allow_Gift_Wrap,											"
						+"\n  Yfs_Item.Extn_Baggage,											"
						+"\n  yfs_item.is_hazmat,												"
						+"\n  yfs_item.item_type,												"
						+"\n  yfs_item.product_line,											"
						+"\n  yfs_item.extn_red_pack_list_type,									"
						+"\n  yfs_item.extn_ship_node_source,									"
						+"\n  yfs_item.extn_nomadic,											"
						+"\n  yfs_item.onhand_safety_factor_qty,								"
						+"\n  yfs_item.onhand_safety_factor_pct									"
						+"\nFROM Yfs_Item														"
						+"\nJOIN Yfs_Item_Alias ON yfs_item_alias.item_key = yfs_item.item_key	");

		SQL_MAP.put(
				ID_UTIL_ITEM_DETAIL_SQL2,
				"\n SELECT DISTINCT 									"
						+ "\n yfs_item.item_type,								"
						+ "\n yfs_item.product_line,							"
						+ "\n yfs_item.extn_ship_node_source, 					"
						+ "\n yfs_item.extn_nomadic, 							"
						+ "\n yfs_item.onhand_safety_factor_qty 				"
						+ "\n FROM yfs_Item JOIN yfs_Item_Alias 				"
						+ "\n ON yfs_item_alias.item_key = yfs_item.item_key	"
						+ "\n WHERE trim(yfs_item.item_id) = ?					");
		
		SQL_MAP.put(
				ID_UTIL_SHIPMENT_LINE_DETAILS_SQL,
				" WITH ship																					"
						+ " AS (SELECT DISTINCT																		"
						+ " s.shipment_no,																			"
						+ " sl.order_no,																			"
						+ " TO_CHAR (s.actual_shipment_date, 'MM/DD/YYYY HH24:MI:SS') actual_shipment_date,			"
						+ " TO_CHAR (s.expected_shipment_date, 'MM/DD/YYYY HH24:MI:SS') expected_shipment_date,		"
						+ " s.pickticket_no,																		"
						+ " s.scac,																					"
						+ " s.carrier_service_code,																	"
						+ " s.shipnode_key,																			"
						+ " COALESCE(u.username, 'Unassigned') as username,																			    "
						+ " st.description status,																	"
						+ " sl.release_no,																			"
						+ " sl.prime_line_no,																		"
						+ " sl.item_id,																				"
						+ " sl.item_description																		"
						+ " FROM yfs_shipment_line sl,																"
						+ " yfs_shipment s,																			"
						+ " yfs_user u,																			"
						+ " yfs_status st,																			"
						+ " yfs_order_line ol,																		"
						+ " yfs_order_header oh																		");

		SQL_MAP.put(
				ID_UTIL_SHIPMENT_LINE_DETAILS_SQL2,
				" WHERE     s.shipment_key = sl.shipment_key		"
						+ " AND st.status = s.status						"
						+ " AND st.process_type_key = 'ORDER_DELIVERY'		"
						+ " AND s.ASSIGNED_TO_USER_ID = u.LOGINID (+)    		"
						+ " AND s.document_type in ('0001','0005')			"
						+ " AND sl.ORDER_LINE_KEY = ol.ORDER_LINE_KEY		"
						+ " AND ol.ORDER_HEADER_KEY = oh.ORDER_HEADER_KEY	");

		SQL_MAP.put(
				ID_UTIL_SHIPMENT_LINE_DETAILS_SQL3,
				" )," //this closes off the top query view "ship"
						+ " container													"
						+ " AS (SELECT DISTINCT s.shipment_no,							"
						+ " sc.tracking_no,												"
						+ " sc.container_scm, sl.prime_line_no,							"
						+ " cd.quantity,												"
						+ " sc.CONTAINER_GROSS_WEIGHT									"
						+ " FROM yfs_shipment_line sl,									"
						+ " yfs_shipment s,												"
						+ " yfs_shipment_container sc,									"
						+ " yfs_container_details cd,									"
						+ " yfs_status st,												"
						+ " yfs_order_line ol,											"
						+ " yfs_order_header oh											"
						+ " WHERE     s.shipment_key = sl.shipment_key					"
						+ " AND sc.shipment_key = s.shipment_key						"
						+ " AND cd.shipment_container_key = sc.shipment_container_key	"
						+ " AND cd.shipment_line_key = sl.shipment_line_key				"
						+ " AND cd.shipment_key = s.shipment_key						"
						+ " AND st.status = s.status									"
						+ " AND st.process_type_key = 'ORDER_DELIVERY'					"
						+ " AND sl.order_line_key = ol.order_line_key					"
						+ " AND ol.order_header_key = oh.order_header_key				"
						+ " AND oh.document_type in ('0001','0005')						"
						+ " AND oh.enterprise_key = 'STOREELF.COM'							");

		SQL_MAP.put(
				ID_UTIL_SHIPMENT_LINE_DETAILS_SQL4,
				" )" //this closes off the second sub-query "container"
						+ " SELECT ship.*,																												"
						+ " COALESCE (container.tracking_no, 'N/A') as tracking_no,																		"
						+ " COALESCE (container.container_scm, 'N/A') as container_scm,																	"
						+ " COALESCE (TO_CHAR (container.quantity), 'N/A') as quantity,																	"
						+ " COALESCE (TO_CHAR (container.container_gross_weight), 'N/A') as container_gross_weight										"
						+ " FROM ship LEFT JOIN container ON ship.shipment_no = container.shipment_no AND ship.prime_line_no = container.prime_line_no 	"
						+ " order by order_no, ship.shipment_no, container.container_scm, ship.release_no, ship.prime_line_no							");

		SQL_MAP.put(
				ID_UTIL_CUSTOMER_EMAIL_SQL,
				"\n select /*+ parallel(8) full(h) full(n) */  TRIM(REPLACE(SUBSTR(note_text,0,INSTR( upper(note_text),'EMAIL')-1),' ','')) as Mail,contact_time as TIME from sterling.yfs_notes n, 	"
						+ "\n sterling.yfs_order_header h where n.table_key =h.order_header_key and order_no=(?) and upper(note_text) like '%EMAIL%'				 											"
						+ "\n  and TRIM(REPLACE(SUBSTR(note_text,0,INSTR( upper(note_text),'EMAIL')-1),' ','')) not in   																						"
						+ "('Thisnoteisforinternaluse.CustomerPickedUp','Thisnoteisforinternaluse.AutoRefund')																									");

		SQL_MAP.put (
				ID_UTIL_PICKTICKET_SQL,
				" select p.tc_order_id as PKT_CTRL_NBR,p.ext_purchase_order as CUST_PO_NBR,p.o_facility_alias_id as WHSE,p.order_type as ORD_TYPE,to_number(NVL(p.tax_id, 0)) as TOTAL_NBR_OF_UNITS,p.d_state_prov as SHIPTO_STATE,p.order_date_dttm as ORD_DATE, "
						+ " TO_DATE(TO_CHAR(p.created_dttm,'YYYY-MON-DD HH24:MI:SS'),'YYYY-MON-DD HH24:MI:SS') as CREATE_DATE_TIME,p.lane_name as RTE_GUIDE_NBR,CASE p.DO_STATUS "
						+ "	WHEN 110 "
						+ " THEN 'Unselected' "
						+ " WHEN 115 "
						+ " THEN 'Preview Wave Selected' "
						+ " WHEN 120 "
						+ " THEN 'Printed' "
						+ " WHEN 140 "
						+ " THEN 'In Packing' "
						+ " WHEN 150 "
						+ " THEN 'Packed' "
						+ " WHEN 160 "
						+ " THEN 'Weighed' "
						+ " WHEN 170 "
						+ " THEN 'Manifested' "
						+ " WHEN 190 "
						+ " THEN 'Shipped' "
						+ " WHEN 200 "
						+ " THEN 'Cancelled' "
						+ " ELSE 'Other' "
						+ " END STAT_CODE  "
						+ " FROM WMOS_EFC.ORDERS@EFC1 p "
						+ " WHERE p.tc_order_id = (?) "
						+ " UNION"
						+ " select p.tc_order_id as PKT_CTRL_NBR,p.ext_purchase_order as CUST_PO_NBR,p.o_facility_alias_id,p.order_type,to_number(NVL(p.tax_id, 0)),p.d_state_prov,p.order_date_dttm, "
						+ " TO_DATE(TO_CHAR(p.created_dttm,'YYYY-MON-DD HH24:MI:SS'),'YYYY-MON-DD HH24:MI:SS'),p.lane_name,CASE p.DO_STATUS "
						+ "	WHEN 110 "
						+ " THEN 'Unselected' "
						+ " WHEN 115 "
						+ " THEN 'Preview Wave Selected' "
						+ " WHEN 120 "
						+ " THEN 'Printed' "
						+ " WHEN 140 "
						+ " THEN 'In Packing' "
						+ " WHEN 150 "
						+ " THEN 'Packed' "
						+ " WHEN 160 "
						+ " THEN 'Weighed' "
						+ " WHEN 170 "
						+ " THEN 'Manifested' "
						+ " WHEN 190 "
						+ " THEN 'Shipped' "
						+ " WHEN 200 "
						+ " THEN 'Cancelled' "
						+ " ELSE 'Other' "
						+ " END STAT_CODE  "
						+ " FROM WMOS_EFC.ORDERS p "
						+ " WHERE p.tc_order_id = (?) "
						+ " UNION"
						+ " select p.tc_order_id,p.ext_purchase_order,p.o_facility_alias_id,p.order_type,to_number(NVL(p.tax_id, 0)),p.d_state_prov,p.order_date_dttm, "
						+ " TO_DATE(TO_CHAR(p.created_dttm,'YYYY-MON-DD HH24:MI:SS'),'YYYY-MON-DD HH24:MI:SS'),p.lane_name,CASE p.DO_STATUS "
						+ "	WHEN 110 "
						+ " THEN 'Unselected' "
						+ " WHEN 115 "
						+ " THEN 'Preview Wave Selected' "
						+ " WHEN 120 "
						+ " THEN 'Printed' "
						+ " WHEN 140 "
						+ " THEN 'In Packing' "
						+ " WHEN 150 "
						+ " THEN 'Packed' "
						+ " WHEN 160 "
						+ " THEN 'Weighed' "
						+ " WHEN 170 "
						+ " THEN 'Manifested' "
						+ " WHEN 190 "
						+ " THEN 'Shipped' "
						+ " WHEN 200 "
						+ " THEN 'Cancelled' "
						+ " ELSE 'Other' "
						+ " END STAT_CODE  "
						+ " FROM WMOS_EFC.ORDERS@EFC3 p "
						+ " WHERE p.tc_order_id = (?) "
						+ " UNION"
						+ " select p.tc_order_id,p.ext_purchase_order,p.o_facility_alias_id,p.order_type,to_number(NVL(p.tax_id, 0)),p.d_state_prov,p.order_date_dttm, "
						+ " TO_DATE(TO_CHAR(p.created_dttm,'YYYY-MON-DD HH24:MI:SS'),'YYYY-MON-DD HH24:MI:SS'),p.lane_name,CASE p.DO_STATUS "
						+ "	WHEN 110 "
						+ " THEN 'Unselected' "
						+ " WHEN 115 "
						+ " THEN 'Preview Wave Selected' "
						+ " WHEN 120 "
						+ " THEN 'Printed' "
						+ " WHEN 140 "
						+ " THEN 'In Packing' "
						+ " WHEN 150 "
						+ " THEN 'Packed' "
						+ " WHEN 160 "
						+ " THEN 'Weighed' "
						+ " WHEN 170 "
						+ " THEN 'Manifested' "
						+ " WHEN 190 "
						+ " THEN 'Shipped' "
						+ " WHEN 200 "
						+ " THEN 'Cancelled' "
						+ " ELSE 'Other' "
						+ " END STAT_CODE  "
						+ " FROM WMOS_EFC.ORDERS@EFC4 p "
						+ " WHERE p.tc_order_id = (?) ");

		SQL_MAP.put(
				ID_UTIL_INV_OMS_SQL,	                
				"WITH item_dt AS"
						+ " (SELECT * FROM yfs_item WHERE trim(item_id) = "
						+ "? "
						+ "),"
						+ "      item_inv_dt"
						+ "      AS (SELECT invit.inventory_item_key,"
						+ "                 item.item_id,"
						+ "                 item.short_description"
						+ "            FROM yfs_inventory_item invit, item_dt item"
						+ "           WHERE invit.item_id = item.item_id),"
						+ "      sup_dt"
						+ "      AS (SELECT i_sup.*"
						+ "            FROM yfs_inventory_supply i_sup, yfs_ship_node ship"
						+ "           WHERE     i_sup.supply_type in ('ONHAND','EF_ONHAND.ex') "
						+ "                 AND i_sup.shipnode_key = ship.shipnode_key"
						+ "                 AND ship.node_type != 'STORE'),"
						+ "      dem_dt"
						+ "      AS (SELECT i_dmd.*"
						+ "            FROM yfs_inventory_demand i_dmd, yfs_ship_node ship"
						+ "           WHERE (i_dmd.demand_type = 'ALLOCATED'"
						+ "                  OR i_dmd.demand_type = 'RESERVED')"
						+ "                 AND i_dmd.shipnode_key = ship.shipnode_key"
						+ "                 AND ship.node_type != 'STORE'),"
						+ " supply AS (                "
						+ " SELECT i.ITEM_ID,"
						+ "        i.SHORT_DESCRIPTION,"
						+ "        'SUPPLY' AS INV_TYPE,"
						+ "        DECODE (TRIM (s.shipnode_key),"
						+ "'855', 'RDC - 855',"+"'885', 'RDC - 885',"+"'810', 'RDC - 810',"
						+ "'830', 'RDC - 830',"+ "'840', 'RDC - 840',"
						+ "'860', 'RDC - 860',"+ "'865', 'RDC - 865',"
						+ "'875', 'RDC - 875',"+ "'890', 'RDC - 890',"
						+ "'873', 'EFC 1-873',"+ "'809', 'EFC 2-809',"
						+ "'829', 'EFC 4-829',"+ "'819', 'EFC 3-819',"
						+ "					 '869', 'LFC 1-869', "
						+ "					 '879', 'LFC 2-879', "
						+ "					 '859', 'LFC 3-859', "
						+ " 				 '889', 'LFC 4-889', "
						+ "NULL, ' ',"
						+ "TRIM (s.shipnode_key))"
						+ "           SHIPNODE_KEY,"
						+ "        NVL (SUM (s.QUANTITY), '0.0') AS QUANTITY"
						+ "   FROM sup_dt s, item_inv_dt i"
						+ "  WHERE i.inventory_item_key = s.INVENTORY_ITEM_KEY(+)"
						+ " GROUP BY i.ITEM_ID,"
						+ "          i.SHORT_DESCRIPTION,"
						+ "          'SUPPLY',"
						+ "          DECODE (TRIM (s.shipnode_key),"
						+ "                  '855', 'RDC - 855',"
						+ "                  '885', 'RDC - 885',"
						+ "                  '810', 'RDC - 810',"
						+ "                  '830', 'RDC - 830',"
						+ "                  '840', 'RDC - 840',"
						+ "                  '860', 'RDC - 860',"
						+ "                  '865', 'RDC - 865',"
						+ "                  '875', 'RDC - 875',"
						+ "                  '890', 'RDC - 890',"
						+ "                  '873', 'EFC 1-873',"
						+ "                  '809', 'EFC 2-809',"
						+ "                  '829', 'EFC 4-829',"
						+ "                  '819', 'EFC 3-819',"
						+ "					 '869', 'LFC 1-869', "
						+ "					 '879', 'LFC 2-879', "
						+ "					 '859', 'LFC 3-859', "
						+ " 				 '889', 'LFC 4-889', "
						+ "                  NULL, ' ',"
						+ "                  TRIM (s.shipnode_key))),"
						+ " demand AS (                 "
						+ " SELECT i.ITEM_ID,"
						+ "        i.SHORT_DESCRIPTION,"
						+ "        'DEMAND' AS INV_TYPE,"
						+ "        DECODE (TRIM (s.shipnode_key),"
						+ "                '855', 'RDC - 855',"
						+ "                '885', 'RDC - 885',"
						+ "                '810', 'RDC - 810',"
						+ "                '830', 'RDC - 830',"
						+ "                '840', 'RDC - 840',"
						+ "                '860', 'RDC - 860',"
						+ "                '865', 'RDC - 865',"
						+ "                '875', 'RDC - 875',"
						+ "                '890', 'RDC - 890',"
						+ "                '873', 'EFC 1-873',"
						+ "                '809', 'EFC 2-809',"
						+ "                '829', 'EFC 4-829',"
						+ "                '819', 'EFC 3-819',"
						+ "				   '869', 'LFC 1-869', "
						+ "				   '879', 'LFC 2-879', "
						+ "				   '859', 'LFC 3-859', "
						+ " 			   '889', 'LFC 4-889', "
						+ "                NULL, ' ',"
						+ "                TRIM (s.shipnode_key))"
						+ "           SHIPNODE_KEY,"
						+ "        NVL (SUM (s.QUANTITY), '0.0') AS QUANTITY"
						+ "   FROM dem_dt s, item_inv_dt i"
						+ "  WHERE i.inventory_item_key = s.INVENTORY_ITEM_KEY(+)"
						+ " GROUP BY i.ITEM_ID,"
						+ "          i.SHORT_DESCRIPTION,"
						+ "          'DEMAND',"
						+ "          DECODE (TRIM (s.shipnode_key),"
						+ "                  '855', 'RDC - 855',"
						+ "                  '885', 'RDC - 885',"
						+ "                  '810', 'RDC - 810',"
						+ "                  '830', 'RDC - 830',"
						+ "                  '840', 'RDC - 840',"
						+ "                  '860', 'RDC - 860',"
						+ "                  '865', 'RDC - 865',"
						+ "                  '875', 'RDC - 875',"
						+ "                  '890', 'RDC - 890',"
						+ "                  '873', 'EFC 1-873',"
						+ "                  '809', 'EFC 2-809',"
						+ "                  '829', 'EFC 4-829',"
						+ "                  '819', 'EFC 3-819',"
						+ "					 '869', 'LFC 1-869', "
						+ "					 '879', 'LFC 2-879', "
						+ "					 '859', 'LFC 3-859', "
						+ " 				 '889', 'LFC 4-889', "
						+ "                  NULL, ' ',"
						+ "                  TRIM (s.shipnode_key))"
						+ "                  )"
						+ " select supply.ITEM_ID, supply.SHORT_DESCRIPTION, supply.SHIPNODE_KEY, DECODE (SIGN (supply.QUANTITY), -1, '0', supply.QUANTITY) AS SUPPLY, DECODE (SIGN (NVL(demand.QUANTITY,0)), -1, '0', NVL(demand.QUANTITY,0)) AS DEMAND"
						+ " from supply"
						+ " LEFT JOIN demand"
						+ " on supply.SHIPNODE_KEY = demand.SHIPNODE_KEY");

		SQL_MAP.put(
				ID_UTIL_INV_OMS_ALERT_SQL,                
				" WITH ohand AS"
						+ " (SELECT ONHAND_AVAILABLE_QUANTITY AS \"ONHAND_AVAILABLE_QUANTITY\","
						+ " ALERT_RAISED_ON                 AS \"ALERT_RAISED_ON\","
						+ " trim(DISTRIBUTION_RULE_ID)            AS \"DISTRIBUTION_RULE_ID\""
						+ " FROM"
						+ " (SELECT yia.onhand_available_quantity                    AS \"ONHAND_AVAILABLE_QUANTITY\","
						+ " TO_CHAR(yia.ALERT_RAISED_ON, 'DD-MON-YYYY HH24:MI:SS') AS \"ALERT_RAISED_ON\","
						+ " yia.distribution_rule_id                               AS \"DISTRIBUTION_RULE_ID\""
						+ " FROM gv_admin.yfs_inventory_item yii,"
						+ " gv_admin.yfs_inventory_alerts yia,"
						+ " gv_admin.yfs_item yi"
						+ " WHERE yii.inventory_item_key = yia.inventory_item_key"
						+ " AND yi.requires_dg_override  ='Y'"
						+ " AND yi.item_id               = yii.item_id"
						+ " AND yia.ship_node            =' '"
						+ " AND trim(yi.item_id)                = ? "
						+ " AND yia.distribution_rule_id IN ( 'DG_ALL_NON_STORES', 'DG_ALL_NODES')"
						+ " UNION"
						+ " SELECT TO_NUMBER('0')                        AS \"ONHAND_AVAILABLE_QUANTITY\","
						+ " TO_CHAR('00-JAN-0000 00:00:00') AS \"ALERT_RAISED_ON\","
						+ " 'NOT RTAM'                                 AS \"DISTRIBUTION_RULE_ID\""
						+ " FROM dual"
						+ " WHERE NOT EXISTS"
						+ " (SELECT yia.onhand_available_quantity                    AS \"ONHAND_AVAILABLE_QUANTITY\","
						+ " TO_CHAR(yia.ALERT_RAISED_ON, 'DD-MON-YYYY HH24:MI:SS') AS \"ALERT_RAISED_ON\","
						+ " yia.distribution_rule_id                               AS \"DISTRIBUTION_RULE_ID\""
						+ " FROM gv_admin.yfs_inventory_item yii,"
						+ " gv_admin.yfs_inventory_alerts yia,"
						+ " gv_admin.yfs_item yi"
						+ " WHERE yii.inventory_item_key = yia.inventory_item_key"
						+ " AND yi.requires_dg_override  ='Y'"
						+ " AND yi.item_id               = yii.item_id"
						+ " AND yia.ship_node            =' '"
						+ " AND trim(yi.item_id)                = ? "
						+ " AND yia.distribution_rule_id IN ( 'DG_ALL_NON_STORES', 'DG_ALL_NODES')"
						+ " )"
						+ " )"
						+ " ORDER BY alert_raised_on DESC"
						+ " )"
						+ " SELECT ONHAND_AVAILABLE_QUANTITY,"
						+ " CASE ALERT_RAISED_ON"
						+ " WHEN '00-JAN-0000 00:00:00'"
						+ " THEN 'Not Sent to Web'"
						+ " ELSE ALERT_RAISED_ON"
						+ " END AS \"ALERT_RAISED_ON\","
						+ " CASE DISTRIBUTION_RULE_ID"
						+ " WHEN 'DG_ALL_NON_STORES'"
						+ " THEN 'Yes'"
						+ " WHEN 'DG_ALL_NODES'"
						+ " THEN 'No'"
						+ " ELSE 'Not Applicable'"
						+ " END AS \"STORE_CLEARANCE_ITEM\""
						+ " FROM ohand"
						+ " WHERE rownum=1");	

		SQL_MAP.put(
				ID_UTIL_INV_GIV_SQL,
				" WITH item_dt as																	"
						+ " (SELECT * FROM yfs_item WHERE item_id = 										"
						+"(?)																					"
						+ "),																				"
						+ "      item_inv_dt																"
						+ "      AS (SELECT invit.inventory_item_key,										"
						+ "                 item.item_id,													"
						+ "                 item.short_description											"
						+ "            FROM yfs_inventory_item invit, item_dt item							"
						+ "           WHERE invit.item_id = item.item_id),									"
						+ "      store_nodes																"
						+ "      AS (SELECT n.shipnode_key													"
						+ "            FROM yfs_ship_node n													"
						+ "           WHERE n.node_type = 'STORE'),											"
						+ "      sup_dt																		"
						+ "      AS (SELECT s.*																"
						+ "            FROM yfs_inventory_supply s, store_nodes sn							"
						+ "           WHERE s.supply_type = 'ONHAND' AND s.SHIPNODE_KEY = sn.shipnode_key),	"
						+ "      dem_dt																		"
						+ "      AS (SELECT d.*																"
						+ "            FROM yfs_inventory_demand d, store_nodes sn							"
						+ "           WHERE (demand_type = 'ALLOCATED' OR demand_type = 'RESERVED')			"
						+ "                 AND d.shipnode_key = sn.shipnode_key),							"
						+ " supply As(																		"
						+ " SELECT i.ITEM_ID,																"
						+ "        i.SHORT_DESCRIPTION,														"
						+ "        'SUPPLY' AS INV_TYPE,													"
						+ "        DECODE (TRIM (s.shipnode_key), NULL, ' ', TRIM (s.shipnode_key))			"
						+ "           SHIPNODE_KEY,															"
						+ "        NVL (SUM (s.QUANTITY), '0.0') AS QUANTITY								"
						+ "   FROM sup_dt s, item_inv_dt i													"
						+ "  WHERE i.inventory_item_key = s.INVENTORY_ITEM_KEY(+)							"
						+ " GROUP BY i.ITEM_ID,																"
						+ "          i.SHORT_DESCRIPTION,													"
						+ "          'SUPPLY',																"
						+ "          DECODE (TRIM (s.shipnode_key), NULL, ' ', TRIM (s.shipnode_key))		"
						+ "          ),																		"
						+ " demand AS (																		"
						+ " SELECT i.ITEM_ID,																"
						+ "        i.SHORT_DESCRIPTION,														"
						+ "        'DEMAND' AS INV_TYPE,													"
						+ "        DECODE (TRIM (s.shipnode_key), NULL, ' ', TRIM (s.shipnode_key))			"
						+ "           SHIPNODE_KEY,															"
						+ "        NVL (SUM (s.QUANTITY), '0.0') AS QUANTITY								"
						+ "   FROM dem_dt s, item_inv_dt i													"
						+ "  WHERE i.inventory_item_key = s.INVENTORY_ITEM_KEY(+)							"
						+ " GROUP BY i.ITEM_ID,																"
						+ "          i.SHORT_DESCRIPTION,													"
						+ "          'DEMAND',																"
						+ "          DECODE (TRIM (s.shipnode_key), NULL, ' ', TRIM (s.shipnode_key))		"
						+ "          )																		"
						+ " select supply.item_id, supply.short_description, supply.shipnode_key, supply.quantity as SUPPLY, NVL(demand.quantity, 0) as DEMAND"
						+ " from supply																		"
						+ " LEFT OUTER JOIN demand															"
						+ " on supply.shipnode_key = demand.shipnode_key 									"
						+ " order by supply.shipnode_key													");

		SQL_MAP.put(
				ID_UTIL_INV_EFC_SQL,
				"SELECT dt.*,													"
						+"       dt.active + dt.CASE + dt.trans + dt.carton alloc_total,"
						+"       dt.unalloc_case + dt.unalloc_trans unalloc_total       "
						+"  FROM (WITH skulist                                          "
						+"  AS (SELECT im.item_name AS sku_id,							"
						+"             im.description AS sku_desc,               		"
						+"             CASE                                      		"
						+"                WHEN iw.convey_flag = '1'              		"
						+"                     AND iwm.dflt_wave_proc_type <> '9'		"
						+"                THEN                                   		"
						+"                   'SORT'                              		"
						+"                WHEN iw.convey_flag = '2'              		"
						+"                     AND iwm.dflt_wave_proc_type <> '9'		"
						+"                THEN                                   		"
						+"                   'NON-SORT'                          		"	
						+"                WHEN iw.convey_flag = '2'              		"
						+"                     AND iwm.dflt_wave_proc_type = '9' 		"
						+"                THEN                                   		"
						+"                   'SHIP_ALONE'                        		"
						+"                WHEN iw.convey_flag = '3'              		"
						+"                THEN                                   		"
						+"                   'CAGE'                              		"
						+"             END                                       		"
						+"                AS sku_type                            		"
						+"        FROM wmos_efc.item_cbo im,                     		"
						+"             wmos_efc.item_facility_mapping_wms iwm,   		"
						+"             wmos_efc.item_wms iw                      		"
						+"       WHERE     im.item_id = iwm.item_id              		"
						+"   AND im.item_id = iw.item_id               					"
						+"   AND im.item_name = '										");

		SQL_MAP.put(
				ID_UTIL_INV_EFC_SQL2,
				"'), 															"
						+"   wmactive                                             		"
						+"   AS (SELECT ic.item_name AS sku_id,                   		"
						+"              SUM (pld.on_hand_qty) AS active_inventory 		"
						+"         FROM wmos_efc.wm_inventory pld,                		"
						+"              msf_efc.locn_hdr lh,                     		"
						+"              wmos_efc.item_cbo ic                      		"
						+"        WHERE     pld.location_id = lh.locn_id          		"
						+"              AND pld.item_id = ic.item_id              		"
						+"              AND lh.locn_class IN ('A', 'C')           		"
						+"       GROUP BY ic.item_name),                          		"
						+"   wmcase                                               		"
						+"   AS (SELECT ic.item_name AS sku_id,                   		"
						+"   SUM (cd.size_value) AS case_inventory     					"
						+"        FROM wmos_efc.lpn_detail cd,                   		"
						+"             wmos_efc.lpn ch,                          		"
						+"             wmos_efc.item_cbo ic                      		"
						+"       WHERE     ch.lpn_id = cd.lpn_id                 		"
						+"  AND cd.item_id = ic.item_id               					"
						+"  AND ch.lpn_facility_status >= 10          					"
						+"  AND ch.lpn_facility_status < 90           					"
						+"  AND ch.inbound_outbound_indicator = 'I'   					"
						+"  AND cd.size_value > 0                     					"
						+"  AND NOT EXISTS                            					"
						+" (SELECT lpn_id                     							"
						+"  FROM    wmos_efc.lpn_lock cl    							"
						+"       JOIN                       							"
						+"          wmos_efc.sys_code sc    							"
						+"       ON sc.code_id = cl.inventory_lock_code					"
						+"          AND sc.rec_type = 'B'              					"
						+"          AND sc.code_type = '527'           					"
						+"          AND (sc.misc_flags IS NULL         					"
						+"  OR SUBSTR (sc.misc_flags,     								"
						+"             2,                 								"
						+"             1) IN              								"
						+"        ('N', ' '))             								"
						+"                    WHERE cl.lpn_id = cd.lpn_id)              "
						+"    GROUP BY ic.item_name),                                   "
						+"             wmtrans                                          "
						+" AS (SELECT ic.item_name AS sku_id,                           "
						+"                SUM (ti.on_hand_qty) AS trans_inventory       "
						+"           FROM wmos_efc.wm_inventory ti, wmos_efc.item_cbo ic"
						+"          WHERE ic.item_id = ti.item_id                       "
						+"               AND transitional_inventory_type is not null    "
						+"         GROUP BY ic.item_name),                              "
						+"                                                              "
						+"     wmcarton                                                 "
						+"     AS (SELECT ic.item_name AS sku_id,                       "
						+"                SUM (ld.size_value) AS carton_inventory       "
						+"           FROM wmos_efc.item_cbo ic,                         "
						+"                   wmos_efc.lpn l                             "
						+"                INNER JOIN                                    "
						+"                   wmos_efc.lpn_detail ld                     "
						+"                ON ld.lpn_id = l.lpn_id                       "
						+"          WHERE     l.lpn_facility_status < 90                "
						+"                AND l.inbound_outbound_indicator = 'O'        "
						+"                AND ic.item_id = ld.item_id                   "
						+"         GROUP BY ic.item_name),                              "
						+"     wmunalloccase                                            "
						+"     AS (SELECT sku_id, qty_not_alloc AS unalloccase_inventory"
						+"  FROM (SELECT ic.item_name AS sku_id,                      	"
						+"               SUM (                                        	"
						+"                  (ld.size_value                            	"
						+"                   - (CASE                                  	"
						+"                         WHEN X.CASE_NBR IS NOT NULL        	"
						+"                         THEN                               	"
						+"                            X.QTY_NOT_ALLOC                 	"
						+"                         ELSE                               	"
						+"                            0                               	"
						+"                      END)))                                	"
						+"                  AS QTY_NOT_ALLOC                          	"
						+"          FROM wmos_efc.item_cbo ic,                        	"
						+"         wmos_efc.lpn l                         				"
						+"      INNER JOIN                                				"
						+"         wmos_efc.lpn_detail ld                 				"
						+"      ON l.lpn_id = ld.lpn_id                   				"
						+"  LEFT OUTER JOIN                              				"
						+"     (SELECT CASE_NBR, SKU_ID, QTY_NOT_ALLOC   				"
						+"        FROM (SELECT l.lpn_id AS CASE_NBR,     				"
						+"                     ic.item_name AS SKU_ID,   				"
						+"                     SUM (                     				"
						+"                        aid.QTY_ALLOC          				"
						+"                        - aid.QTY_PULLD)       				"
						+"                        AS QTY_NOT_ALLOC       				"
						+"   FROM wmos_efc.item_cbo ic,     							"
						+"        wmos_efc.lpn_detail ld,   							"
						+"           wmos_efc.lpn l         							"
						+"        INNER JOIN                							"
						+"           wmos_efc.ALLOC_INVN_DTL aid  						"
						+"        ON l.tc_lpn_id =                						"
						+"              aid.CNTR_NBR              						"
						+"           AND aid.STAT_CODE < 90       						"
						+"           AND EXISTS                   						"
						+"                  (SELECT 1             						"
						+"                     FROM wmos_efc.INVN_NEED_TYPE int 		"
						+"                    WHERE int.TASK_CMPL_CORR_UPD IN   		"
						+"                             (2, 6)                   		"
						+"                          AND int.INVN_NEED_TYPE =    		"
						+"                                 aid.INVN_NEED_TYPE   		"
						+"                          AND int.WHSE =              		"
						+"                                 aid.WHSE)            		"
						+"  WHERE l.lpn_facility_status IN    							"
						+"           (45, 50, 64)             							"
						+"        AND l.lpn_id = ld.lpn_id    							"
						+"        AND ld.item_id =            							"
						+"               ic.item_id           							"
						+"  GROUP BY l.lpn_id, ic.item_name)   							"
						+"   UNION ALL                                  				"
						+"   SELECT CASE_NBR, SKU_ID, QTY_NOT_ALLOC     				"
						+"     FROM (SELECT l.lpn_id AS CASE_NBR,       				"
						+"                  ic.item_name AS SKU_ID,     				"
						+"                  SUM (                       				"
						+"                     td.QTY_ALLOC             				"
						+"                     - td.QTY_PULLD)          				"
						+"                     AS QTY_NOT_ALLOC         				"
						+"             FROM wmos_efc.item_cbo ic,       				"
						+"                  wmos_efc.lpn_detail ld,     				"
						+"                        wmos_efc.lpn l        				"
						+"                     INNER JOIN               				"
						+"                        wmos_efc.TASK_DTL td  				"
						+"                     ON l.tc_lpn_id =         				"
						+"                           td.CNTR_NBR        				"
						+"                  INNER JOIN                  				"
						+"                     wmos_efc.TASK_HDR th     				"
						+"                  ON td.TASK_ID = th.TASK_ID  				"
						+"                     AND th.STAT_CODE < 90    				"
						+"                     AND EXISTS               				"
						+"         (SELECT 1         									"
						+"            FROM wmos_efc.INVN_NEED_TYPE int 					"
						+"           WHERE int.TASK_CMPL_CORR_UPD IN   					"
						+"                    (2, 6)                   					"
						+"                 AND int.INVN_NEED_TYPE =    					"
						+"                        th.INVN_NEED_TYPE    					"
						+"                 AND int.WHSE =              					"
						+"                        th.WHSE) 								"
						+"  WHERE l.lpn_facility_status IN          					"
						+"           (45, 50, 64)                   					"
						+"        AND ic.item_id =                  					"
						+"               ld.item_id                 					"
						+"        AND ld.lpn_id = l.lpn_id          					"
						+"   GROUP BY l.lpn_id, ic.item_name)) X      					"
						+"   ON ld.lpn_id = X.CASE_NBR                		        	"
						+"    WHERE     l.lpn_facility_status >= 10                     "
						+"  AND l.lpn_facility_status < 90            		        	"
						+"  AND ld.item_id = ic.item_id               		        	"
						+"  AND l.inbound_outbound_indicator = 'I'    		        	"
						+"  AND EXISTS                                		        	"
						+"   (SELECT 1                                     				"
						+"      FROM wmos_efc.lpn l                        				"
						+"           INNER JOIN (SELECT ll.lpn_id          				"
						+"                                 AS CASE_NBR     				"
						+"                         FROM    wmos_efc.lpn_lock ll 		"
						+"                              INNER JOIN              		"
						+"                                 msf_efc.SYS_CODE sc  		"
						+"                              ON ll.INVENTORY_LOCK_CODE = 	"
						+"                                    sc.CODE_ID          		"
						+"                        WHERE sc.REC_TYPE =             		"
						+"                                 'B'                    		"
						+"                              AND sc.CODE_TYPE =        		"
						+"                                     '527'              		"
						+"                              AND (SUBSTR (             		"
						+"                                      sc.MISC_FLAGS,    		"
						+"                                      2,                		"
						+"                                      1) =              		"
						+"                                      'N'               		"
						+"                                   OR sc.MISC_FLAGS     		"
						+"                                         IS NULL        		"
						+"                                   OR SUBSTR (          		"
						+"                                         sc.MISC_FLAGS, 		"
						+"                                         2,      				"
						+"                                         1) =    				"
						+"                                         ' ')    				"
						+"                       GROUP BY ll.lpn_id) MV5   				"
						+"              ON l.lpn_id = MV5.CASE_NBR         				"
						+"           INNER JOIN wmos_efc.lpn_detail Y      				"
						+"              ON l.lpn_id = Y.lpn_id             				"
						+"     WHERE l.lpn_facility_status >= 10           				"
						+"           AND l.lpn_facility_status < 90        				"
						+"           AND ld.lpn_id = Y.lpn_id)             				"
						+"   GROUP BY ic.item_name)), 									"
						+"  wmunalloctrans                                              "
						+"  AS (SELECT ic.item_name AS sku_id,                          "
						+"             SUM (wi.on_hand_qty) AS unalloctrans_inventory   "
						+"        FROM wmos_efc.wm_inventory wi,                        "
						+"             wmos_efc.item_cbo ic,                            "
						+"             msf_efc.sys_code sc                              "
						+"       WHERE     wi.item_id = ic.item_id                      "
						+"             AND wi.transitional_inventory_type = sc.code_id  "
						+"             AND sc.rec_type = 'B'                            "
						+"             AND sc.code_type = '052'                         "
						+"             AND (sc.misc_flags IS NULL                       "
						+"                  OR SUBSTR (sc.misc_flags, 3, 1) IN ('N', ' ')) "
						+"      GROUP BY ic.item_name)                     				"
						+" SELECT TRIM (sku_id) item_id,                       			"
						+"        TRIM (sku_desc) item_description,            			"
						+"        NVL(sku_type, ' ') item_type,                			"
						+"        COALESCE ( (SELECT active_inventory          			"
						+"                      FROM wmactive                  			"
						+"                     WHERE sku_id = skulist.sku_id), 			"
						+"                  0)                                 			"
						+"           AS ACTIVE,                                			"
						+"        COALESCE ( (SELECT case_inventory            			"
						+"                      FROM wmcase                    			"
						+"                     WHERE sku_id = skulist.sku_id), 			"
						+"                  0)                                 			"
						+"           AS CASE,                                  			"
						+"        COALESCE ( (SELECT trans_inventory           			"
						+"                      FROM wmtrans                   			"
						+"                     WHERE sku_id = skulist.sku_id), 			"
						+"                  0)                                 			"
						+"           AS TRANS,                                 			"
						+"        COALESCE ( (SELECT carton_inventory          			"
						+"                      FROM wmcarton                  			"
						+"                     WHERE sku_id = skulist.sku_id), 			"
						+"                  0)                                 			"
						+"           AS CARTON,                                			"
						+"        COALESCE ( (SELECT unalloccase_inventory     			"
						+"                      FROM wmunalloccase             			"
						+"                     WHERE sku_id = skulist.sku_id), 			"
						+"                  0)                                 			"
						+"           AS UNALLOC_CASE,                          			"
						+"        COALESCE ( (SELECT unalloctrans_inventory    			"
						+"                      FROM wmunalloctrans            			"
						+"                     WHERE sku_id = skulist.sku_id), 			"
						+"                  0)                                 			"
						+"           AS UNALLOC_TRANS    								"
						+"   FROM skulist                								"
						+" ORDER BY Sku_Id) Dt           								");

		SQL_MAP.put(
				ID_UTIL_CHUB_INVOICE_SQL,
				" select 																		\n " +
						"  distinct TO_CHAR(YFS_SHIPMENT.SHIP_DATE,'DD-MON-YYYY')            SHIP_DATE, \n " +
						"  trim(YFS_SHIPMENT.EXTN_DSV_INVOICE_NUM) VENDOR_INVOICE_NUM,                        \n " +
						"  trim(YFS_SHIPMENT.SHIPNODE_KEY)         VENDOR_ID,                                 \n " +
						"  trim(YFS_SHIPMENT_LINE.ORDER_NO)        CHUB_ORDER_NO,                             \n " +
						"  trim(K.DEPARTMENT)                      DEPARTMENT,                                \n " +
						"  trim(K.INT_PO_NO)                       INTERNAL_PO,                               \n " +
						"  trim(K.INT_PO_STATUS_DESC)        PO_STATUS,	                                \n " +
						"  YFS_SHIPMENT_LINE.ORIGINAL_QUANTITY SHIPMENT_QUANTITY,	              		\n " +
						"  YFS_SHIPMENT_LINE.ITEM_ID		 ITEM_ID				              		\n " +
						"  FROM STERLING.YFS_SHIPMENT      YFS_SHIPMENT,                                \n " +
						"       STERLING.YFS_SHIPMENT_LINE YFS_SHIPMENT_LINE,                           \n " +										
						"       STERLING.K_OFT_INT_PO_HDR  K,                                           \n " +
						"       STERLING.K_OFT_SHIPMENT_INTPO  KS                                       \n " +
						" where YFS_SHIPMENT.SHIPMENT_KEY = YFS_SHIPMENT_LINE.SHIPMENT_KEY              \n " +
						"   AND K.VENDOR_NUMBER = YFS_SHIPMENT.SHIPNODE_KEY                             \n " +
						"   and KS.INT_PO_HDR_KEY = K.INT_PO_HDR_KEY                                    \n " +
						"   and KS.SHIPMENT_KEY = YFS_SHIPMENT.SHIPMENT_KEY                             \n " +
						"   and KS.SHIPMENT_LINE_KEY = YFS_SHIPMENT_LINE.SHIPMENT_LINE_KEY              \n " +
						"   AND YFS_SHIPMENT.DOCUMENT_TYPE = '0005'                                     \n " +
				"   and EXTN_DSV_INVOICE_NUM is not null	                                    \n ");

		SQL_MAP.put(
				ID_UTIL_SAFETY_FACTOR_SQL,
				" Select ind.node as STORE_NO, 						"
						+ "i.extn_dept as DEPT, 							"
						+ "ind.item_id as SKU, 								"
						+ "ind.onhand_safety_factor_qty as SAFETY_FACTOR 	"
						+ "from yfs_item_node_defn ind, 					"
						+ "yfs_item i 										"
						+ "where ind.item_id = i.item_id 					");

		SQL_MAP.put(
				ID_UTIL_SAFETY_FACTOR_SQL2,
				"Select Case When SKU is null THEN 'N/A' ELSE SKU END as SKU, 			"
						+ " DEPT, 																"
						+ "	SAFETY_FACTOR, 														"
						+ "	sourcing_type, 														"
						+ "	Case when SKU is null then 'DEPT SS' ELSE 'ITEM SS' END as SS_TYPE 	"
						+ "	from (Select i.item_id as SKU, 										"
						+ "	i.extn_dept as DEPT, 												"
						+ "	ss.onhand_safety_factor_qty as SAFETY_FACTOR, 						"
						+ "	CASE 																"
						+ "	WHEN ss.attribute_value = 'PICK' 									"
						+ "	THEN 'BOPUS' 														"
						+ "	WHEN ss.attribute_value = 'SHP' 									"
						+ "	THEN 'SFS' 															"
						+ "	END SOURCING_TYPE, 													"
						+ " ss.attribute_value													"
						+ "	from yfs_item i, 													"
						+ "	YFS_SKU_SAFETY_FACTOR_DEFN ss 										"
						+ "	where ss.parent_key = i.item_key 									"
						+ "	and ss.parent_table = 'YFS_ITEM' 									"
						+ "	UNION 																"
						+ "	Select null as SKU, 												"
						+ "	cat.category_id as DEPT, 											"
						+ "	ss.onhand_safety_factor_qty as SAFETY_FACTOR, 						"
						+ "	CASE 																"
						+ "	WHEN ss.attribute_value = 'PICK' 									"
						+ "	THEN 'BOPUS' 														"
						+ "	WHEN ss.attribute_value = 'SHP' 									"
						+ "	THEN 'SFS' 															"
						+ "	END SOURCING_TYPE, 													"
						+ " ss.attribute_value													"
						+ "	from yfs_category cat, 												"
						+ "	YFS_CLASS_ITEM_ATTR cia, 											"
						+ "	YFS_SKU_SAFETY_FACTOR_DEFN ss 										"
						+ "	where ss.parent_key = cia.class_item_attr_key 						"
						+ "	and cia.category_key = cat.category_key 							"
						+ "	and ss.parent_table = 'YFS_CLASS_ITEM_ATTR') 						"
						+ "	where 																");

		SQL_MAP.put(
				SD_UNIT_CAPACITY_GIV_SQL,
				"CASE 																	"
						+ "WHEN pool.RESOURCE_POOL_ID LIKE '%-PICK%' 							"
						+ "THEN 'BOPUS' 														"
						+ "ELSE 'SFS' 															"
						+ "END SOURCING_TYPE, 													"
						+ "c.sunday_capacity, 													"
						+ "c.monday_capacity, 													"
						+ "c.tuesday_capacity, 													"
						+ "c.wednesday_capacity, 												"
						+ "c.thursday_capacity, 												"
						+ "c.friday_capacity, 													"
						+ "c.saturday_capacity 													"
						+ "FROM yfs_res_pool_dow_capcty c, 										"
						+ "YFS_RES_POOL_STD_CAPCTY_PERD p, 										"
						+ "yfs_res_pool pool 													"
						+ "WHERE pool.RESOURCE_POOL_KEY       = p.RESOURCE_POOL_KEY 			"
						+ "AND c.RES_POOL_STD_CAPCTY_PERD_KEY = p.RES_POOL_STD_CAPCTY_PERD_KEY 	");

		SQL_MAP.put(
				SD_RULE_DETAIL_GIV_SQL,
				"\n  SELECT DISTINCT hdr.FULFILLMENT_TYPE,							"
						+"\n  region.REGION_NAME,											"
						+"\n  hdr.ITEM_CLASSIFICATION,										"
						+"\n  hdr.ITEM_CLASSIFICATION2,										"
						+"\n  hdr.ITEM_CLASSIFICATION3,										"
						+"\n  hdr.item_classification4,										"
						+"\n  hdr.item_classification5										"
						+"\n  FROM yfs_sourcing_rule_hdr hdr,								"
						+"\n  yfs_sourcing_rule_dtl dtl,									"
						+"\n  yfs_region region												"
						+"\n  WHERE hdr.region_key = region.region_key						"
						+"\n  AND hdr.sourcing_rule_hdr_key = dtl.sourcing_rule_hdr_key		");

		SQL_MAP.put(
				SD_RULE_DETAIL_GIV_SQL2,
				"\n  UNION 															"
						+"\n  SELECT 														"
						+"\n hdr.fulfillment_type,											"
						+"\n '',															"
						+"\n hdr.item_classification,										"
						+"\n hdr.item_classification2,										"
						+"\n hdr.item_classification3,										"
						+"\n hdr.item_classification4,										"
						+"\n hdr.item_classification5										"							    
						+"\n FROM yfs_sourcing_rule_hdr hdr,								"
						+"\n  yfs_sourcing_rule_dtl dtl										"
						+"\n WHERE hdr.sourcing_rule_hdr_key = dtl.sourcing_rule_hdr_key	");
		/*
	SQL_MAP.put(
		SD_REGION_DETAIL_GIV_SQL,
			" SELECT dr.distribution_rule_id, dr.priority, dr.shipnode_key, 				"
			+" TO_CHAR(dr.effective_start_date, 'DD-MON-YYYY') as EFFECTIVE_START_DATE, 	"
			+" TO_CHAR(dr.effective_end_date, 'DD-MON-YYYY') as EFFECTIVE_END_DATE, 		"
			+" sn.LATITUDE, sn.LONGITUDE,pi.city, pi.state 									"
			+" FROM yfs_item_ship_node dr, yfs_ship_node sn, YFS_PERSON_INFO pi 			"
			+" WHERE dr.distribution_rule_id ='"+distribution_name+"'						"
			+" and dr.shipnode_key = sn.shipnode_key 										"
			+" and sn.SHIP_NODE_ADDRESS_KEY = pi.PERSON_INFO_KEY 							"
			+" ORDER BY dr.distribution_rule_id, dr.priority, dr.shipnode_key				");
		 */
		SQL_MAP.put(
				SD_DIST_GROUP_GIV_SQL,
				"   SELECT DISTINCT dtl.distribution_rule_id					"
						+"  FROM yfs_sourcing_rule_hdr hdr,								"
						+"  yfs_sourcing_rule_dtl dtl,									"
						+"  yfs_region region,											"
						+"  yfs_ship_node sn											"
						+"  WHERE hdr.region_key = region.region_key					"
						+"  AND hdr.sourcing_rule_hdr_key = dtl.sourcing_rule_hdr_key	");

		SQL_MAP.put(
				SD_GROUP_DETAIL_GIV_SQL,
				"   SELECT DISTINCT dtl.distribution_rule_id					"
						+"  FROM yfs_sourcing_rule_hdr hdr,								"
						+"  yfs_sourcing_rule_dtl dtl,									"
						+"  yfs_region region											"
						+"  WHERE hdr.region_key = region.region_key					"
						+"  AND hdr.sourcing_rule_hdr_key = dtl.sourcing_rule_hdr_key	"
						+"  ORDER BY dtl.distribution_rule_id							");

		SQL_MAP.put(
				WM_PROSHIP_CONT_LOOKUP_SQL,
				" select 																										"
						+ " shipping_container_id as CONTAINER_ID, Shipper_name as SHIPPER_NAME, SHIPVIA, TRACKING_NUMBER, DIVERT_LANE, "
						+ " SERVER_NAME, PNA_AUTOBagger_Station as BAGGER,  															"
						+ " TO_CHAR(creation_datetime,'MM/DD/YYYY HH:MI:SS AM') as CREATETS, 											"
						+ " TO_CHAR(confirmation_scan_datetime,'MM/DD/YYYY HH:MI:SS AM') as CONFIRMTS, 									"
						+ " TO_CHAR(shipvia_sent_datetime,'MM/DD/YYYY HH:MI:SS AM') as SHIPVIATS, 										"
						+ " sent_8001_message as SENT_8001 																				"
						+ " from proship_container_history ch where ch.shipping_container_id = ?										"
						+ " order by ch.creation_datetime																				");

		SQL_MAP.put(
				WM_BUILD_QUERY_SQL,
				"\n count(case when ROUND(TO_NUMBER(((TO_DATE(TO_CHAR(lrfra.PRINT_END_DTTM, 'YYYY-MM-DD HH24:MI:SS'), 'YYYY-MM-DD HH24:MI:SS') - TO_DATE(TO_CHAR(lrfra.PRINT_START_DTTM, 'YYYY-MM-DD HH24:MI:SS'), 'YYYY-MM-DD HH24:MI:SS')) * 24 * 60 * 60))) BETWEEN 0 AND 5 THEN lrfr.REPORT_ID END)\"1_5\", 			"
						+ "\n count(case when ROUND(TO_NUMBER(((TO_DATE(TO_CHAR(lrfra.PRINT_END_DTTM, 'YYYY-MM-DD HH24:MI:SS'), 'YYYY-MM-DD HH24:MI:SS') - TO_DATE(TO_CHAR(lrfra.PRINT_START_DTTM, 'YYYY-MM-DD HH24:MI:SS'), 'YYYY-MM-DD HH24:MI:SS')) * 24 * 60 * 60))) BETWEEN 6 AND 10 THEN lrfr.REPORT_ID END)\"6_10\", 		"
						+ "\n count(case when ROUND(TO_NUMBER(((TO_DATE(TO_CHAR(lrfra.PRINT_END_DTTM, 'YYYY-MM-DD HH24:MI:SS'), 'YYYY-MM-DD HH24:MI:SS') - TO_DATE(TO_CHAR(lrfra.PRINT_START_DTTM, 'YYYY-MM-DD HH24:MI:SS'), 'YYYY-MM-DD HH24:MI:SS')) * 24 * 60 * 60))) BETWEEN 11 AND 15 THEN lrfr.REPORT_ID END)\"11_15\", 		"
						+ "\n count(case when ROUND(TO_NUMBER(((TO_DATE(TO_CHAR(lrfra.PRINT_END_DTTM, 'YYYY-MM-DD HH24:MI:SS'), 'YYYY-MM-DD HH24:MI:SS') - TO_DATE(TO_CHAR(lrfra.PRINT_START_DTTM, 'YYYY-MM-DD HH24:MI:SS'), 'YYYY-MM-DD HH24:MI:SS')) * 24 * 60 * 60))) BETWEEN 16 AND 20 THEN lrfr.REPORT_ID END)\"16_20\", 		"
						+ "\n count(case when ROUND(TO_NUMBER(((TO_DATE(TO_CHAR(lrfra.PRINT_END_DTTM, 'YYYY-MM-DD HH24:MI:SS'), 'YYYY-MM-DD HH24:MI:SS') - TO_DATE(TO_CHAR(lrfra.PRINT_START_DTTM, 'YYYY-MM-DD HH24:MI:SS'), 'YYYY-MM-DD HH24:MI:SS')) * 24 * 60 * 60))) BETWEEN 21 AND 30 THEN lrfr.REPORT_ID END)\"21_30\", 		"
						+ "\n count(case when ROUND(TO_NUMBER(((TO_DATE(TO_CHAR(lrfra.PRINT_END_DTTM, 'YYYY-MM-DD HH24:MI:SS'), 'YYYY-MM-DD HH24:MI:SS') - TO_DATE(TO_CHAR(lrfra.PRINT_START_DTTM, 'YYYY-MM-DD HH24:MI:SS'), 'YYYY-MM-DD HH24:MI:SS')) * 24 * 60 * 60))) BETWEEN 31 AND 40 THEN lrfr.REPORT_ID END)\"31_40\", 		"
						+ "\n count(case when ROUND(TO_NUMBER(((TO_DATE(TO_CHAR(lrfra.PRINT_END_DTTM, 'YYYY-MM-DD HH24:MI:SS'), 'YYYY-MM-DD HH24:MI:SS') - TO_DATE(TO_CHAR(lrfra.PRINT_START_DTTM, 'YYYY-MM-DD HH24:MI:SS'), 'YYYY-MM-DD HH24:MI:SS')) * 24 * 60 * 60))) BETWEEN 41 AND 50 THEN lrfr.REPORT_ID END)\"41_50\", 		"
						+ "\n count(case when ROUND(TO_NUMBER(((TO_DATE(TO_CHAR(lrfra.PRINT_END_DTTM, 'YYYY-MM-DD HH24:MI:SS'), 'YYYY-MM-DD HH24:MI:SS') - TO_DATE(TO_CHAR(lrfra.PRINT_START_DTTM, 'YYYY-MM-DD HH24:MI:SS'), 'YYYY-MM-DD HH24:MI:SS')) * 24 * 60 * 60))) BETWEEN 51 AND 60 THEN lrfr.REPORT_ID END)\"51_60\", 		"
						+ "\n count(case when ROUND(TO_NUMBER(((TO_DATE(TO_CHAR(lrfra.PRINT_END_DTTM, 'YYYY-MM-DD HH24:MI:SS'), 'YYYY-MM-DD HH24:MI:SS') - TO_DATE(TO_CHAR(lrfra.PRINT_START_DTTM, 'YYYY-MM-DD HH24:MI:SS'), 'YYYY-MM-DD HH24:MI:SS')) * 24 * 60 * 60))) BETWEEN 61 AND 120 THEN lrfr.REPORT_ID END)\"61_120\",		"
						+ "\n count(case when ROUND(TO_NUMBER(((TO_DATE(TO_CHAR(lrfra.PRINT_END_DTTM, 'YYYY-MM-DD HH24:MI:SS'), 'YYYY-MM-DD HH24:MI:SS') - TO_DATE(TO_CHAR(lrfra.PRINT_START_DTTM, 'YYYY-MM-DD HH24:MI:SS'), 'YYYY-MM-DD HH24:MI:SS')) * 24 * 60 * 60))) BETWEEN 121 AND 300 THEN lrfr.REPORT_ID END)\"121_300\", 	"
						+ "\n count(case when ROUND(TO_NUMBER(((TO_DATE(TO_CHAR(lrfra.PRINT_END_DTTM, 'YYYY-MM-DD HH24:MI:SS'), 'YYYY-MM-DD HH24:MI:SS') - TO_DATE(TO_CHAR(lrfra.PRINT_START_DTTM, 'YYYY-MM-DD HH24:MI:SS'), 'YYYY-MM-DD HH24:MI:SS')) * 24 * 60 * 60))) BETWEEN 301 AND 1800 THEN lrfr.REPORT_ID END)\"301_1800\", "
						+ "\n count(case when ROUND(TO_NUMBER(((TO_DATE(TO_CHAR(lrfra.PRINT_END_DTTM, 'YYYY-MM-DD HH24:MI:SS'), 'YYYY-MM-DD HH24:MI:SS') - TO_DATE(TO_CHAR(lrfra.PRINT_START_DTTM, 'YYYY-MM-DD HH24:MI:SS'), 'YYYY-MM-DD HH24:MI:SS')) * 24 * 60 * 60))) > 1801 THEN lrfr.REPORT_ID END)\"1800\", 					"
						+ "\n count(lrfr.REPORT_ID)\"TOTAL\"									" 																																	
						+ "\n FROM WMOS_EFC.LRF_REPORT_AUDIT lrfra  							"
						+ "\n JOIN WMOS_EFC.LRF_REPORT lrfr 									"
						+ "\n ON lrfr.REPORT_ID = lrfra.REPORT_ID 								"
						+ "\n WHERE lrfr.REPORT_NAME LIKE 'KH_LBColl%'							");

		SQL_MAP.put(
				WM_BUILD_QUERY_SQL2,
				"\n AND lrfr.PRINT_STATUS = 90 										"
						+ "\n AND lrfr.CREATED_DTTM >= TO_DATE('%s', 'MM/DD/YYYY')			"
						+ "\n AND lrfr.CREATED_DTTM <= TO_DATE('%s', 'MM/DD/YYYY') + 1		"
						+ "\n AND lrfr.RETRIES = 0 											"
						+ "\n %s															"
						+ "\n GROUP BY TO_CHAR(lrfr.CREATED_DTTM, '%s') %s					"
						+ "\n %s															"
						+ "\n ORDER BY TO_DATE(TO_CHAR(lrfr.CREATED_DTTM, '%s'), '%s') DESC	");

		SQL_MAP.put(
				WT_TRANSFER_ORDERS_SQL,
				" h.order_header_key=l.order_header_key and l.item_id=i.item_id  and l.order_line_key=s.order_line_key and s.status_quantity > 0 ),  "
						+"sku_count as "
						+"(select count(distinct(l.item_id)) skucount,l.order_header_key from "
						+"yfs_order_line l,orderheader h where h.order_header_key=l.order_header_key group by l.order_header_key),  "

			+"final_qry as "
			+"(SELECT h.order_no,h.order_date,h.entered_by,h.order_header_key,h.order_type,ct.skucount,  "

			+"COALESCE((select sum(s.status_quantity) from yfs_order_release_status s where s.order_header_key=h.order_header_key and s.status_quantity > 0 and s.status='9000'),0) Cancel_Qty,  "
			+"COALESCE((select sum(s.status_quantity) from yfs_order_release_status s where s.order_header_key=h.order_header_key and s.status_quantity > 0 and s.status='3700'),0) Ship_Qty,  "
			+"COALESCE((select sum(s.status_quantity) from yfs_order_release_status s where s.order_header_key=h.order_header_key and s.status_quantity > 0 and s.status='3200'),0) Rel_Qty, "
			+"COALESCE((select sum(s.status_quantity) from yfs_order_release_status s where s.order_header_key=h.order_header_key and s.status_quantity > 0 and s.status='3200.01'),0) SenttoWmoS_Qty,  "
			+""
			+"(select sum(s.status_quantity) from yfs_order_release_status s where s.order_header_key=h.order_header_key and s.status_quantity > 0) totqty,  "
			+"(select max(s.status_date) from yfs_order_release_status s where s.order_header_key=h.order_header_key and s.status_quantity > 0) status_date  "

			+"FROM orderheader h,sku_count ct where h.order_header_key=ct.order_header_key)  "

			+"select distinct r.order_no as ORDER_NO,r.order_date ORDER_DATE, "
			+"CASE WHEN ((r.SenttoWmoS_Qty=0) AND (r.Ship_Qty+r.Cancel_Qty=r.totqty) AND (r.Cancel_Qty!=r.totqty)) THEN 'Shipped' "
			+"WHEN ((r.SenttoWmoS_Qty=0) AND (r.Cancel_Qty=r.totqty)) THEN 'Cancelled' "
			+"WHEN ((r.SenttoWmoS_Qty=0) AND (r.Ship_Qty=r.totqty)) THEN 'Shipped' "
			+"WHEN ((r.SenttoWmoS_Qty>0) AND (r.SenttoWmoS_Qty+r.Cancel_Qty=r.totqty)) THEN 'Sent Release To WMoS' "
			+"WHEN ((r.SenttoWmoS_Qty>0) AND (r.Ship_Qty>0)) THEN 'Partially Shipped' "
			+"WHEN ((r.Rel_Qty>0) AND (r.SenttoWmoS_Qty>0)) THEN 'Partially Sent Release To WMoS' "
			+"WHEN ((r.Rel_Qty>0) AND (r.Rel_Qty+r.Cancel_Qty=r.totqty) AND (r.Cancel_Qty!=r.totqty)) THEN 'Released' "
			+"ELSE ((select distinct status_name from yfs_status where process_type_key='20030708142438541' and status=(select max(status) from yfs_order_release_status s where s.order_header_key=r.order_header_key and s.status_quantity > 0 ))) "
			+"END as status, "
			+"r.status_date,r.order_type TRANSFER_TYPE,r.skucount ITEM_COUNT,r.totqty TOTAL_UNITS, "
			+"r.Ship_Qty SHIPPED_UNITS,r.Cancel_Qty CANCELLED_UNITS,(r.totqty-(r.Ship_Qty+r.Cancel_Qty)) as UNIT_VARIANCE,r.entered_by "
			+"from final_qry r order by r.order_no");

		SQL_MAP.put(
				WT_TRANSFER_ORDERS_SQL2,
				" h.document_type='0006' and sh.document_type='0006' and "
						+"sh.shipment_key=sl.shipment_key and sl.order_line_key=l.order_line_key and h.order_header_key=l.order_header_key and l.item_id=i.item_id and "
						+"l.order_line_key=s.order_line_key and s.status_quantity > 0),  "

			+"sku_count as "
			+"(select count(distinct(l.item_id)) skucount,sum(l.original_ordered_qty) totqty,l.order_header_key from yfs_order_line l,orderheader h where "
			+"h.order_header_key=l.order_header_key group by l.order_header_key),  "

			+"final_qry as (SELECT h.order_no,h.order_date,h.entered_by,h.order_header_key,h.order_type,ct.skucount,  "

			+"COALESCE((select sum(s.status_quantity) from yfs_order_release_status s where s.order_header_key=h.order_header_key and s.status_quantity > 0 and s.status='9000'),0) Cancel_Qty,  "
			+"COALESCE((select sum(s.status_quantity) from yfs_order_release_status s where s.order_header_key=h.order_header_key and s.status_quantity > 0 and s.status='3700'),0) Ship_Qty,  "
			+"COALESCE((select sum(s.status_quantity) from yfs_order_release_status s where s.order_header_key=h.order_header_key and s.status_quantity > 0 and s.status='3200'),0) Rel_Qty, "
			+"COALESCE((select sum(s.status_quantity) from yfs_order_release_status s where s.order_header_key=h.order_header_key and s.status_quantity > 0 and s.status='3200.01'),0) SenttoWmoS_Qty,  "

			+"(select sum(s.status_quantity) from yfs_order_release_status s where s.order_header_key=h.order_header_key and s.status_quantity > 0) totqty  FROM orderheader h,sku_count ct where h.order_header_key=ct.order_header_key)  "

			+"select distinct r.order_no as ORDER_NO,r.order_date ORDER_DATE, CASE "

			+"WHEN ((r.SenttoWmoS_Qty=0) AND (r.Ship_Qty+r.Cancel_Qty=r.totqty) AND (r.Cancel_Qty!=r.totqty)) THEN 'Shipped' "
			+"WHEN ((r.SenttoWmoS_Qty=0) AND (r.Cancel_Qty=r.totqty)) THEN 'Cancelled' "
			+"WHEN ((r.SenttoWmoS_Qty=0) AND (r.Ship_Qty=r.totqty)) THEN 'Shipped' "
			+"WHEN ((r.SenttoWmoS_Qty>0) AND (r.SenttoWmoS_Qty+r.Cancel_Qty=r.totqty)) THEN 'Sent Release To WMoS' "
			+"WHEN ((r.SenttoWmoS_Qty>0) AND (r.Ship_Qty>0)) THEN 'Partially Shipped' "
			+"WHEN ((r.Rel_Qty>0) AND (r.SenttoWmoS_Qty>0)) THEN 'Partially Sent Release To WMoS' "
			+"WHEN ((r.Rel_Qty>0) AND (r.Rel_Qty+r.Cancel_Qty=r.totqty) AND (r.Cancel_Qty!=r.totqty)) THEN 'Released' "
			+"ELSE ((select distinct status_name from yfs_status where "
			+"process_type_key='20030708142438541' and status=(select max(status) from "
			+"yfs_order_release_status s where s.order_header_key=r.order_header_key and s.status_quantity > 0 ))) "
			+"END as status, r.order_type TRANSFER_TYPE,r.skucount ITEM_COUNT,r.totqty TOTAL_UNITS, r.Ship_Qty SHIPPED_UNITS,r.Cancel_Qty CANCELLED_UNITS,"
			+"(r.totqty-(r.Ship_Qty+r.Cancel_Qty)) as UNIT_VARIANCE,r.entered_by "
			+"from final_qry r order by r.order_no");

		SQL_MAP.put(
				WT_TRANSFER_ORDER_POPUP_SQL,
				" h.document_type='0006' and sh.document_type='0006' and sh.shipment_key=sl.shipment_key and sl.order_header_key=h.order_header_key and sl.order_line_key=ol.order_line_key and "
						+"h.order_header_key=ol.order_header_key and ol.item_id=i.item_id  )  "

			+"select distinct order_search.LINE_NO prime_line_no,order_search.ITEM_ID,order_search.ITEM_DESC item_description,order_search.DEPT extn_dept,order_search.CLASS1 extn_class,order_search.SUB_CLASS extn_sub_class, "
			+"CASE WHEN ((order_search.SenttoWmoS_Qty=0) AND (order_search.Ship_Qty+order_search.Cancel_Qty=order_search.totqty) AND (order_search.Cancel_Qty!=order_search.totqty)) THEN 'Shipped' "
			+"WHEN ((order_search.SenttoWmoS_Qty=0) AND (order_search.Cancel_Qty=order_search.totqty)) THEN 'Cancelled' "
			+"WHEN ((order_search.SenttoWmoS_Qty=0) AND (order_search.Ship_Qty=order_search.totqty)) THEN 'Shipped' "
			+"WHEN ((order_search.SenttoWmoS_Qty>0) AND (order_search.SenttoWmoS_Qty+order_search.Cancel_Qty=order_search.totqty)) THEN 'Sent Release To WMoS' "
			+"WHEN ((order_search.SenttoWmoS_Qty>0) AND (order_search.Ship_Qty>0)) THEN 'Partially Shipped' "
			+"WHEN ((order_search.Rel_Qty>0) AND (order_search.SenttoWmoS_Qty>0)) THEN 'Partially Sent Release To WMoS' "
			+"WHEN ((order_search.Rel_Qty>0) AND (order_search.Rel_Qty+order_search.Cancel_Qty=order_search.totqty) AND (order_search.Cancel_Qty!=order_search.totqty)) THEN 'Released' "
			+"ELSE ((select distinct status_name from yfs_status where process_type_key='20030708142438541' and status=(select max(status) from yfs_order_release_status s where s.order_line_key=order_search.order_line_key and s.status_quantity > 0 ))) "
			+"END as status, " 
			+"order_search.FROM_NODE shipnode_key,order_search.TO_NODE receiving_node,order_search.TOTAL_UNITS,order_search.SHIPPED_UNITS, "
			+"order_search.CANCELLED_UNITS,order_search.UNIT_VARIANCE,shipment_search.SHIPMENT_DATE,shipment_search.SHIPMENT_NO,shipment_search.SHIPMENT_LINE,shipment_search.BOL, "
			+"shipment_search.UNITS,shipment_search.BATCH_NO,trim(TO_CHAR(shipment_search.ITEM_RETAIL_PRICE,'$999999999999999.99')) ITEM_RETAIL_PRICE,trim(TO_CHAR((shipment_search.UNITS*shipment_search.ITEM_RETAIL_PRICE),'$999999999999999.99')) DISTRIBUTED_RETAIL_PRICE, "
			+"order_search.extn_pick_ticket_no from "
			+"order_search,shipment_search where ");	


		SQL_MAP.put(
				REPRINT_MANUAL_SCM_SQL,"Select Distinct sc.container_scm from yfs_shipment s, yfs_shipment_container sc, yfs_person_info pi, yfs_container_details cd, yfs_item i where s.shipment_key = sc.shipment_key and s.to_address_key = pi.person_info_key and sc.SHIPMENT_CONTAINER_KEY = cd.SHIPMENT_CONTAINER_KEY and i.item_id=cd.item_id and s.status='1400' ");
		SQL_MAP.put(
				REPRINT_MANUAL_INIT_BOXES_SQL,"select ITEM_ID from yfs_item where is_shipping_cntr='Y'");
		SQL_MAP.put(
				REPRINT_MANUAL_INIT_STORES_SQL,"Select distinct shipnode_key from  yfs_ship_node sn where sn.node_type = 'STORE' OR sn.shipnode_type='RDC' ORDER BY SHIPNODE_KEY");
		SQL_MAP.put(
				REPRINT_MANUAL_INIT_SVCLVL_SQL,"Select distinct(srvc_lvl_desc) from k_wot_shpr_srvc_config ssc, k_wot_shpr_loc sl where ssc.SHPR_LOC_NBR = sl.shpr_loc_nbr and sl.shpr_loc_typ_cde = 'Store' order by srvc_lvl_desc");
		SQL_MAP.put(
				REPRINT_SHIPMENT_SCM_SQL,"Select s.shipment_no, sc.container_scm, s.shipnode_key from yfs_shipment s, yfs_shipment_container sc where s.shipment_key = sc.shipment_key and s.shipment_no = '");
		SQL_MAP.put(
				REPRINT_SHIPMENT_SCM_SQL2, "Select s.shipment_no, sc.container_scm, cd.item_id, cd.QUANTITY, s.shipnode_key from yfs_shipment s, yfs_shipment_container sc, yfs_container_details cd where s.shipment_key = sc.shipment_key and sc.SHIPMENT_CONTAINER_KEY = cd.SHIPMENT_CONTAINER_KEY and s.shipment_key = '");
		SQL_MAP.put(
				REPRINT_BOTH_CONTAINER_SQL,"Select sc.container_scm, cd.item_id, cd.QUANTITY, i.short_description from yfs_shipment s, yfs_shipment_container sc, yfs_container_details cd, yfs_item i where s.shipment_key = sc.shipment_key and sc.SHIPMENT_CONTAINER_KEY = cd.SHIPMENT_CONTAINER_KEY and i.item_id=cd.item_id and sc.container_scm = '");
		SQL_MAP.put(
				REPRINT_BOTH_PERSON_SQL,"Select pi.address_line1, pi.city, pi.state, pi.first_name, pi.last_name, pi.day_phone, pi.zip_code, sc.container_scm, oh.order_date, s.requested_carrier_service_code, s.shipnode_key, sc.container_length, sc.container_width, sc.CONTAINER_HEIGHT, sc.actual_weight from yfs_shipment s, yfs_shipment_container sc, yfs_person_info pi, yfs_order_header oh where s.shipment_key = sc.shipment_key  and s.order_header_key = oh.order_header_key and s.to_address_key = pi.person_info_key and sc.container_scm = '");
		SQL_MAP.put(
				REPRINT_BOTH_PERSON_SQL2, "select CONSIGNEE_POSTALCODE, CONSIGNEE_COMPANY, SERVICE_LEVEL from proship_container_history h where h.shipping_container_id='" );

		SQL_MAP.put(
				REPRINT_MANUAL_SHIPALONE_SQL, "select unit_length, unit_width, unit_height from yfs_shipment s, yfs_shipment_container sc, yfs_container_details cd, yfs_item i where s.shipment_key = sc.shipment_key and sc.SHIPMENT_CONTAINER_KEY = cd.SHIPMENT_CONTAINER_KEY and i.item_id=cd.item_id and sc.container_scm = '");

		SQL_MAP.put(
				REPRINT_MANUAL_STORE_INFO_SQL,"select organization_name, address_line1, city, STATE ,zip_code, day_phone from YFS_PERSON_INFO i, YFS_ORGANIZATION o where i.person_info_key=o.corporate_address_key  and o.ORGANIZATION_key='");
		
		SQL_MAP.put(
				ID_UTIL_INV_OMS_SQL_QUICK, "WITH item_dt AS"
						+ " (SELECT * FROM yfs_item WHERE trim(item_id) = "
						+ "? "
						+ "),"
						+ "      item_inv_dt"
						+ "      AS (SELECT invit.inventory_item_key,"
						+ "                 item.item_id,"
						+ "                 item.short_description"
						+ "            FROM yfs_inventory_item invit, item_dt item"
						+ "           WHERE invit.item_id = item.item_id),"
						+ "      sup_dt"
						+ "      AS (SELECT i_sup.*"
						+ "            FROM yfs_inventory_supply i_sup, yfs_ship_node ship"
						+ "           WHERE     i_sup.supply_type in ('ONHAND','EF_ONHAND.ex') "
						+ "                 AND i_sup.shipnode_key = ship.shipnode_key"
						+ "                 AND ship.node_type != 'Store'),"
						+ "      dem_dt"
						+ "      AS (SELECT i_dmd.*"
						+ "            FROM yfs_inventory_demand i_dmd, yfs_ship_node ship"
						+ "           WHERE (i_dmd.demand_type = 'ALLOCATED'"
						+ "                  OR i_dmd.demand_type = 'RESERVED')"
						+ "                 AND i_dmd.shipnode_key = ship.shipnode_key"
						+ "                 AND ship.node_type != 'Store'),"
						+ " supply AS (                "
						+ " SELECT i.ITEM_ID,"
						+ "        i.SHORT_DESCRIPTION,"
						+ "        'SUPPLY' AS INV_TYPE,"
						+ "        DECODE (TRIM (s.shipnode_key),"
						+ "'855', 'RDC - 855',"+"'885', 'RDC - 885',"+"'810', 'RDC - 810',"
						+ "'830', 'RDC - 830',"+ "'840', 'RDC - 840',"
						+ "'860', 'RDC - 860',"+ "'865', 'RDC - 865',"
						+ "'875', 'RDC - 875',"+ "'890', 'RDC - 890',"
						+ "'873', 'EFC 1-873',"+ "'809', 'EFC 2-809',"
						+ "'829', 'EFC 4-829',"+ "'819', 'EFC 3-819',"
						+ "					 '869', 'LFC 1-869', "
						+ "					 '879', 'LFC 2-879', "
						+ "					 '859', 'LFC 3-859', "
						+ " 				 '889', 'LFC 4-889', "
						+ "NULL, ' ',"
						+ "TRIM (s.shipnode_key))"
						+ "           SHIPNODE_KEY,"
						+ "        NVL (SUM (s.QUANTITY), '0.0') AS QUANTITY"
						+ "   FROM sup_dt s, item_inv_dt i"
						+ "  WHERE i.inventory_item_key = s.INVENTORY_ITEM_KEY(+)"
						+ " GROUP BY i.ITEM_ID,"
						+ "          i.SHORT_DESCRIPTION,"
						+ "          'SUPPLY',"
						+ "          DECODE (TRIM (s.shipnode_key),"
						+ "                  '855', 'RDC - 855',"
						+ "                  '885', 'RDC - 885',"
						+ "                  '810', 'RDC - 810',"
						+ "                  '830', 'RDC - 830',"
						+ "                  '840', 'RDC - 840',"
						+ "                  '860', 'RDC - 860',"
						+ "                  '865', 'RDC - 865',"
						+ "                  '875', 'RDC - 875',"
						+ "                  '890', 'RDC - 890',"
						+ "                  '873', 'EFC 1-873',"
						+ "                  '809', 'EFC 2-809',"
						+ "                  '829', 'EFC 4-829',"
						+ "                  '819', 'EFC 3-819',"
						+ "					 '869', 'LFC 1-869', "
						+ "					 '879', 'LFC 2-879', "
						+ "					 '859', 'LFC 3-859', "
						+ " 				 '889', 'LFC 4-889', "
						+ "                  NULL, ' ',"
						+ "                  TRIM (s.shipnode_key))),"
						+ " demand AS (                 "
						+ " SELECT i.ITEM_ID,"
						+ "        i.SHORT_DESCRIPTION,"
						+ "        'DEMAND' AS INV_TYPE,"
						+ "        DECODE (TRIM (s.shipnode_key),"
						+ "                '855', 'RDC - 855',"
						+ "                '885', 'RDC - 885',"
						+ "                '810', 'RDC - 810',"
						+ "                '830', 'RDC - 830',"
						+ "                '840', 'RDC - 840',"
						+ "                '860', 'RDC - 860',"
						+ "                '865', 'RDC - 865',"
						+ "                '875', 'RDC - 875',"
						+ "                '890', 'RDC - 890',"
						+ "                '873', 'EFC 1-873',"
						+ "                '809', 'EFC 2-809',"
						+ "                '829', 'EFC 4-829',"
						+ "                '819', 'EFC 3-819',"
						+ "				   '869', 'LFC 1-869', "
						+ "				   '879', 'LFC 2-879', "
						+ "				   '859', 'LFC 3-859', "
						+ " 			   '889', 'LFC 4-889', "
						+ "                NULL, ' ',"
						+ "                TRIM (s.shipnode_key))"
						+ "           SHIPNODE_KEY,"
						+ "        NVL (SUM (s.QUANTITY), '0.0') AS QUANTITY"
						+ "   FROM dem_dt s, item_inv_dt i"
						+ "  WHERE i.inventory_item_key = s.INVENTORY_ITEM_KEY(+)"
						+ " GROUP BY i.ITEM_ID,"
						+ "          i.SHORT_DESCRIPTION,"
						+ "          'DEMAND',"
						+ "          DECODE (TRIM (s.shipnode_key),"
						+ "                  '855', 'RDC - 855',"
						+ "                  '885', 'RDC - 885',"
						+ "                  '810', 'RDC - 810',"
						+ "                  '830', 'RDC - 830',"
						+ "                  '840', 'RDC - 840',"
						+ "                  '860', 'RDC - 860',"
						+ "                  '865', 'RDC - 865',"
						+ "                  '875', 'RDC - 875',"
						+ "                  '890', 'RDC - 890',"
						+ "                  '873', 'EFC 1-873',"
						+ "                  '809', 'EFC 2-809',"
						+ "                  '829', 'EFC 4-829',"
						+ "                  '819', 'EFC 3-819',"
						+ "					 '869', 'LFC 1-869', "
						+ "					 '879', 'LFC 2-879', "
						+ "					 '859', 'LFC 3-859', "
						+ " 				 '889', 'LFC 4-889', "
						+ "                  NULL, ' ',"
						+ "                  TRIM (s.shipnode_key))"
						+ "                  )"
						+ " select supply.ITEM_ID, supply.SHORT_DESCRIPTION, supply.SHIPNODE_KEY, DECODE (SIGN (supply.QUANTITY), -1, '0', supply.QUANTITY) AS SUPPLY, DECODE (SIGN (NVL(demand.QUANTITY,0)), -1, '0', NVL(demand.QUANTITY,0)) AS DEMAND"
						+ " from supply"
						+ " LEFT JOIN demand"
						+ " on supply.SHIPNODE_KEY = demand.SHIPNODE_KEY"

				);

	}
}